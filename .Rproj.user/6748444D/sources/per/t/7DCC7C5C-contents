# # # #####################################################################################################################
# context("testing column existence")
# test_that("testing column existence", {
#   x <- c(0,NA,"dd",160)
#   y <- c(1,2,3,4)
#   tempdata = as.data.frame(cbind(y,x))
#   colnames(tempdata)<-c("name","age")
#   expect_equal(checkColumnExist("age",tempdata),0)
# 
# })
# context("testing column existence")
# test_that("testing column existence", {
#   x <- c(0,NA,"dd",160)
#   y <- c(1,2,3,4)
#   tempdata = as.data.frame(cbind(y,x))
#   colnames(tempdata)<-c("name","num")
#   expect_equal(checkColumnExist("age",tempdata),-1)
# 
# })
# # # #####################################################################################################################
# # # #####################################################################################################################
# context("testing file existence")
# test_that("test for file existence and access", {
#   thisdir=getwd()
#   expect_identical(testFileExistRead(thisdir),0)
#   nodir="/Users/SheejaMK/Desktop/Model/filecheck/test"
#   expect_identical(testFileExistRead(nodir),-1)
# })
# 
# # # #####################################################################################################################
# 
# context("testing mode function")
# test_that("testing mode function", {
#   x <- c(0,11,78,160)
#   expect_equal(getModeForVec(x),0)
# 
# })
# context("testing mode function")
# test_that("testing mode function", {
#   x <- c(0,"f",78,160)
#   expect_equal(getModeForVec(x),-1)
# 
# })
# 
# context("testing mode function")
# test_that("testing mode function", {
#   x <- c(78,NA,78,78)
#   expect_equal(getModeForVec(x),78)
# 
# })
# context("testing mode function")
# test_that("testing mode function", {
#   x <- c(78,"NA",78,78)
#   expect_equal(getModeForVec(x),-1)
# 
# })
# # # #####################################################################################################################
# context("testing subsetGenderAgeToGroup")
# test_that("testing subsetGenderAgeToGroup", {
#   set.seed(20)
#   sampledata <- data.frame(age=abs(rnorm(10, 60, 20)),
#                            sex=factor(sample(c("M", "F"), 10, replace=T)),
#                            arm=factor(sample(c("Control", "Intervention"), 10, replace=T)),
#                            eq5d3L.q1=(sample(c(1,2,3), 10, replace=T)),
#                            eq5d3L.q2=(sample(c(1,2,3), 10, replace=T)),
#                            eq5d3L.q3=(sample(c(1,2,3), 10, replace=T)),
#                            eq5d3L.q4=(sample(c(1,2,3), 10, replace=T)),
#                            eq5d3L.q5=(sample(c(1,2,3), 10, replace=T)))
# 
# 
# 
#   expect_equal(getColNumExistingColNames("sex",sampledata),2)
#   expect_equal(getColNumExistingColNames("age",sampledata),1)
#   expect_equal(getColNumExistingColNames(c("sex","gender","male","female","f","m"),sampledata),2)
#   expect_equal(getColNumExistingColNames(c("gender","male","female","f","m"),sampledata),-1)
#   expect_equal(getColNumExistingColNames("",sampledata),-1)
# 
# })
# # # #####################################################################################################################
# context("testing subsetGenderAgeToGroup")
# test_that("testing subsetGenderAgeToGroup", {
#   set.seed(17)
#   sampledata <- data.frame(age=abs(rnorm(10, 60, 20)),
#                            sex=factor(sample(c("M", "F"), 10, replace=T)),
#                            arm=factor(sample(c("Control", "Intervention"), 10, replace=T)),
#                            eq5d3L.q1=(sample(c(1,2,3), 10, replace=T)),
#                            eq5d3L.q2=(sample(c(1,2,3), 10, replace=T)),
#                            eq5d3L.q3=(sample(c(1,2,3), 10, replace=T)),
#                            eq5d3L.q4=(sample(c(1,2,3), 10, replace=T)),
#                            eq5d3L.q5=(sample(c(1,2,3), 10, replace=T)))
#   one<-subset(sampledata,sex=="F")
#   two<-subset(one,one$age>=10 & one$age<= 70)
#   expect_equal(subsetGenderAgeToGroup(sampledata,"female",c(10,70)),two)
#   one<-subset(sampledata,sex=="M")
#   two<-subset(one,one$age>=10 & one$age<= 70)
#   expect_equal(subsetGenderAgeToGroup(sampledata,"male",c(10,70)),two)
# 
#   one<-subset(sampledata,sex=="F")
#   two<-subset(one,one$age>=0 & one$age<= 10)
#   expect_equal(subsetGenderAgeToGroup(sampledata,"female",c(0,10)),two)
#   expect_identical(subsetGenderAgeToGroup(sampledata,"bh",c(10,70)),-1)
#   expect_identical(subsetGenderAgeToGroup(sampledata,"bh",NULL),-1)
# 
#   one<-subset(sampledata,sex=="M")
#   expect_identical(subsetGenderAgeToGroup(sampledata,"male",NULL),one)
# 
# })
# 
# # # #####################################################################################################################
# 
# context("testing descritpvie statistics")
# test_that("testing descritpvie statistics", {
#   x <- c(0,11,78,160)
#   results=matrix(c(249,62.25,73.72189,44.5,0,36.86,0,160,4),nrow=1, byrow=TRUE)
#   colnames(results)<-c("Sum","Mean","SD","Median", "Mode","SE","Minimum","Maximum","Count")
#   rownames(results)<-"age"
#   expect_equal(descriptiveStatDataColumn(x,"age",NA),results,tolerance=0.001)
# 
# })
# 
# context("testing descriptive statistics")
# test_that("testing descriptive statistics", {
#   x <- c(0,11,78,160)
#   results=matrix(c(249, 83,74.62573, 78,11,43.08519, 11 ,160 ,3),nrow=1, byrow=TRUE)
#   colnames(results)<-c("Sum","Mean","SD","Median", "Mode","SE","Minimum","Maximum","Count")
#   rownames(results)<-"age"
#   expect_equal(descriptiveStatDataColumn(x,"age",0),results,tolerance=0.001)
# 
# })
# 
# context("testing descriptive statistics")
# test_that("testing descriptive statistics", {
#   x <- c(0,NA,78,160)
#   results=matrix(c(238,79.33333,80.00833,78,0, 46.19283,0 ,160 ,3),nrow=1, byrow=TRUE)
#   colnames(results)<-c("Sum","Mean","SD","Median", "Mode","SE","Minimum","Maximum","Count")
#   rownames(results)<-"age"
#   expect_equal(descriptiveStatDataColumn(x,"age",NA),results,tolerance=0.001)
# 
# })
# 
# context("testing descriptive statistics")
# test_that("testing descriptive statistics", {
#   x <- c(0,NA,"dd",160)
#   expect_equal(descriptiveStatDataColumn(x,"age",NA),-1)
# 
# })
# context("testing descriptive statistics")
# test_that("testing descriptive statistics", {
#   x <- c('',11,78,160)
#   expect_equal(descriptiveStatDataColumn(x,"age",NA),-1)
# 
# })
# 
# ## # #####################################################################################################################
# 
# context("testing numeric column")
# test_that("test for numeric values in a specific column but with no range given", {
#   x <- c(0,11,78,120)
#   expect_identical(testDataNumNorange(x,0),0)
#   x <- c(-8, 99,2,5,-99)
#   expect_identical(testDataNumNorange(x,-99),0)
#   x <- c("sheeja", 99,2,5,-99)
#   expect_identical(testDataNumNorange(x,-99),-1)
# 
# })
## # #####################################################################################################################
## # #####################################################################################################################

# #####################################################################################################################
# context("EQ5D5L scoring ")
# test_that("EQ5D5L scoring ", {
#   the.result<-valueEQ5D5LIndscores("England",1,1,1,1,2)
#   expect_equal(the.result,0.922,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",11112)
#   expect_equal(the.result,0.922,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",11121)
#   expect_equal(the.result,0.937,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",11211)
#   expect_equal(the.result,0.950,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",12111)
#   expect_equal(the.result,0.950,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",21111)
#   expect_equal(the.result,0.942,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",55555)
#   expect_equal(the.result,-0.285,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",111)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",345678)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("NM",-11111)
#   expect_equal(the.result,-1,tolerance=1e-3)
# 
#   the.result<-valueEQ5D5LIndscores("England",11112, NA, NA, NA, NA)
#   expect_equal(the.result,0.922,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(1,1,1,1,2), NA, NA, NA, NA)
#   expect_equal(the.result,0.922,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(1,1,1), NA, NA, NA, NA)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(8,1,1,2,1), NA, NA, NA, NA)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(1,1,1,1,2), NA, NA, NA)
#   expect_equal(the.result,0.922,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",11111)
#   expect_equal(the.result,1,tolerance=1e-3)
# 
#   the.result<-valueEQ5D5LIndscores("England",c(1,1,1,1,2))
#   expect_equal(the.result,0.922,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(1,1,1,2,1))
#   expect_equal(the.result,0.937,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(1,1,2,1,1))
#   expect_equal(the.result,0.950,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(1,2,1,1,1))
#   expect_equal(the.result,0.950,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("Ireland",c(2,1,1,1,1))
#   expect_equal(the.result,0.937,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(5,5,5,5,5))
#   expect_equal(the.result,-0.285,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(1,1,1))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(3,4,5,6,7,8))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",c(-1,1,1,1,1))
#   expect_equal(the.result,-1,tolerance=1e-3)
#  
#   the.result<-valueEQ5D5LIndscores("England",NA,1,1,1,2)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",NA,1,1,2,1)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",NA,1,1,1)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",1,1,1,1,NA)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("England",-1,1,1,1,1)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("Germany",1,1,1,1,1)
#   expect_equal(the.result,1,tolerance=1e-3)
#   the.result<-valueEQ5D5LIndscores("US",1,1,1,1,1)
#   expect_equal(the.result,-1,tolerance=1e-3)
# })
# # 
#################################################################################################################
# context("EQ5D5L scoring")
# test_that("EQ5D5L scoring", {
#   answers =EQ5d5L_valuesets_13countries.df
#   total_entries=seq(1,nrow(answers))
#   end1=length(total_entries)
#   total_countries=c("Canada","China","England" ,"Germany","HongKong","Indonesia","Ireland",
#                     "Japan","Netherlands","Spain","Thailand","Uruguay")
#   start=which(colnames(answers)=="Canada")
#   needtocheck=c("Japan","Netherlands","Spain","Uruguay")
#   final=start+6
#   for(j in start:final){
#     this.country=colnames(answers)[j]
#     print(this.country)
#     for (i in 1:10){
#        #print(answers$X5Lprofile[total_entries[i]])
#         the.result<-valueEQ5D5LIndscores(this.country,answers$X5Lprofile[total_entries[i]])
#         this.col<-answers[[this.country]]
#         #print(the.result)
#         #print(this.col[total_entries[i]])
#         expect_equal(the.result,this.col[total_entries[i]],tolerance=1e-3)
#     }
#   }
# })
# #################################################################################################################


# context("testing EQ5D3L valuation using individual responses")
# test_that("test for value3L", {
#   the.result<-valueEQ5D3LIndscores("UK","TTO",1,1,1,1,2)
#   expect_equal(the.result,0.848,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",11112)
#   expect_equal(the.result,0.848,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",11121)
#   expect_equal(the.result,0.796,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",11211)
#   expect_equal(the.result,0.883,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",12111)
#   expect_equal(the.result,0.815,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",21111)
#   expect_equal(the.result,0.85,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",33333)
#   expect_equal(the.result,-0.594,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",55555)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",111)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",345678)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("NM","TTO",-11111)
#   expect_equal(the.result,-1,tolerance=1e-3)
# 
#   the.result<-valueEQ5D3LIndscores("UK","TTO",11112, NA, NA, NA, NA)
#   expect_equal(the.result,0.848,tolerance=1e-3)
# 
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(1,1,1,1,2), NA, NA, NA, NA)
#   expect_equal(the.result,0.848,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(1,1,1), NA, NA, NA, NA)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(8,1,1,2,1), NA, NA, NA, NA)
#   expect_equal(the.result,-1,tolerance=1e-3)
# 
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(1,1,1,1,2), NA, NA, NA)
#   expect_equal(the.result,0.848,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",11111)
#   expect_equal(the.result,1,tolerance=1e-3)
#   #
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(1,1,1,1,2))
#   expect_equal(the.result,0.848,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(1,1,1,2,1))
#   expect_equal(the.result,0.796,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(1,1,2,1,1))
#   expect_equal(the.result,0.883,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(1,2,1,1,1))
#   expect_equal(the.result,0.815,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(2,1,1,1,1))
#   expect_equal(the.result,0.85,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(5,5,5,5,5))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(1,1,1))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(3,4,5,6,7,8))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",c(-1,1,1,1,1))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   #
#   the.result<-valueEQ5D3LIndscores("UK","TTO",NA,1,1,1,2)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",NA,1,1,2,1)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",NA,1,1,1)
#   expect_equal(the.result,NA,tolerance=1e-3)
# 
#   the.result<-valueEQ5D3LIndscores("UK","TTO",1,1,1,1,NA)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",-1,1,1,1,1)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("DE","TTO",1,1,1,1,1)
#   expect_equal(the.result,-1,tolerance=1e-3)
# 
# 
#   the.result<-valueEQ5D3LIndscores("UK","TTO",4,5,6,5,8)
#   expect_equal(the.result,-1)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",-1,2,3,2,2)
#   expect_equal(the.result,-1)
#   the.result<-valueEQ5D3LIndscores("UK","TTO",123)
#   expect_equal(the.result,NA)
#   the.result<-valueEQ5D3LIndscores("JP","TTO",c(1,2,3,2,3))
#   expect_equal(the.result,-1)
#   answers =EQ5D3L_indexvalues.df
#   for (i in 1:nrow(answers)){
#    the.scores3L=convertNumberToIndividualDigits(answers$state[i])
#    the.result<-valueEQ5D3LIndscores("UK","TTO",answers$state[i])
#    expect_equal(the.result,answers$UKTTO[i])
#   }
# })
# 
# # #################################################################################################################
# # 
# 
# context("testing EQ5D3L valuation using individual responses")
# test_that("test for value3L", {
#   
#   the.result<-valueEQ5D3LIndscores("UK","VAS",1,1,1,1,2)
#   expect_equal(the.result,0.782,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",11112)
#   expect_equal(the.result,0.782,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",11121)
#   expect_equal(the.result,0.761,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",11211)
#   expect_equal(the.result,0.814,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",12111)
#   expect_equal(the.result,0.752,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",21111)
#   expect_equal(the.result,0.774,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",33333)
#   expect_equal(the.result,-0.073,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",55555)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",111)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",345678)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("NM","VAS",-11111)
#   expect_equal(the.result,-1,tolerance=1e-3)
#    
#   the.result<-valueEQ5D3LIndscores("UK","VAS",11112, NA, NA, NA, NA)
#   expect_equal(the.result,0.782,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(1,1,1,1,2), NA, NA, NA, NA)
#   expect_equal(the.result,0.782,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(1,1,1), NA, NA, NA, NA)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(8,1,1,2,1), NA, NA, NA, NA)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(1,1,1,1,2), NA, NA, NA)
#   expect_equal(the.result,0.782,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",11111)
#   expect_equal(the.result,1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(1,1,1,1,2))
#   expect_equal(the.result,0.782,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(1,1,1,2,1))
#   expect_equal(the.result,0.761,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(1,1,2,1,1))
#   expect_equal(the.result,0.814,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(1,2,1,1,1))
#   expect_equal(the.result,0.752,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(2,1,1,1,1))
#   expect_equal(the.result,0.774,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(5,5,5,5,5))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(1,1,1))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(3,4,5,6,7,8))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",c(-1,1,1,1,1))
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",NA,1,1,1,2)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",NA,1,1,2,1)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",NA,1,1,1)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",1,1,1,1,NA)
#   expect_equal(the.result,NA,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",-1,1,1,1,1)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("DE","VAS",1,1,1,1,1)
#   expect_equal(the.result,-1,tolerance=1e-3)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",4,5,6,5,8)
#   expect_equal(the.result,-1)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",-1,2,3,2,2)
#   expect_equal(the.result,-1)
#   the.result<-valueEQ5D3LIndscores("UK","VAS",123)
#   expect_equal(the.result,NA)
#   the.result<-valueEQ5D3LIndscores("JP","VAS",c(1,2,3,2,3))
#   expect_equal(the.result,-1)
#   answers =EQ5D3L_indexvalues.df
#   for (i in 1:nrow(answers)){
#     the.scores3L=convertNumberToIndividualDigits(answers$state[i])
#     the.result<-valueEQ5D3LIndscores("UK","VAS",answers$state[i])
#     expect_equal(the.result,answers$UKVAS[i])
#   }
# })
################################################################################################################
context("EQ5D3L scoring")
test_that("EQ5D3L scoring", {
  answers =EQ5D3L_indexvalues.df
  total_entries=seq(1,nrow(answers))
  end1=length(total_entries)
  total_countries=c("UK","USA"	,"Italy",	"Canada",	"Germany"	,"Spain",	"France",	"Japan"	,"Korea",	"Netherlands"	,"Thailand",	"Zimbabwe")
  VAS_countrylist=c("Belgium","Denmark" ,"Europe","Finland","Germany","NewZealand","Slovenia","Spain","UK")
  TTO_countrylist=c("Brazil","Canada","Chile","Denmark" ,"Europe","France","Germany","Italy","Japan","Korea",
                    "Netherlands","Poland", "Portugal","Spain","Taiwan","Thailand","UK","USA","Zimbawe")
  total<-length(total_countries)
  for(j in 3:3){
    print(total_countries[j])
    if(total_countries[j]=="UK"){
      TTOcol="UKTTO"
      VAScol="UKVAS"
      for (i in total_entries){
        the.result<-valueEQ5D3LIndscores(total_countries[j],"TTO",answers$state[total_entries[i]])
        this.col<-answers[[TTOcol]]
        expect_equal(the.result,this.col[total_entries[i]],tolerance=1e-3)
      }
    }else{
      TTOcol=which(colnames(answers)==total_countries[j])
      for (i in total_entries){
        the.result<-valueEQ5D3LIndscores(total_countries[j],"TTO",answers$state[total_entries[i]])
        this.col<-answers[[TTOcol]]
        print(the.result)
        print(this.col[total_entries[i]])
        expect_equal(the.result,this.col[total_entries[i]],tolerance=1e-3)
      }
    }
  }
})
#################################################################################################################

